
import React from 'react';
import type { Step } from './types';
import CodeBlock from './components/CodeBlock';
import { DatabaseIcon } from './components/icons/DatabaseIcon';
import { BrowserIcon } from './components/icons/BrowserIcon';
import { RocketIcon } from './components/icons/RocketIcon';

const createTableSql = `-- This script creates a new 'messages' table.
-- The 'DROP TABLE' line is there to make the script re-runnable,
-- in case you need to start over. It won't affect your Lesson 1 table.
DROP TABLE IF EXISTS messages;

-- Create a new messages table with a user_id column
CREATE TABLE messages (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  text TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);`;

const enableRLS = `ALTER TABLE messages ENABLE ROW LEVEL SECURITY;`;

const selectPolicySql = `-- 1. SELECT Policy: Users can only see their own messages.
CREATE POLICY "Users can view their own messages"
ON messages
FOR SELECT
USING (auth.uid() = user_id);`;

const insertPolicySql = `-- 2. INSERT Policy: Users can only add messages as themselves.
CREATE POLICY "Users can insert their own messages"
ON messages
FOR INSERT
WITH CHECK (auth.uid() = user_id);`;


export const TUTORIAL_STEPS: Step[] = [
  {
    title: 'Part 1: The Secure Database (Supabase & RLS)',
    icon: <DatabaseIcon />,
    content: (
      <div className="space-y-4">
        <p>For this lesson, we will create a brand new Supabase project to keep it separate from your "Hello World" project.</p>
        <ol className="list-decimal list-inside space-y-3 pl-4">
          <li>Go to your <a href="https://app.supabase.com" target="_blank" rel="noopener noreferrer" className="text-brand-primary hover:underline">Supabase Dashboard</a> and click **"New project"**. Name it something like <span className="font-semibold text-white">Lesson 2 Auth App</span>.</li>
          <li>Once the project is ready, navigate to the <span className="font-semibold text-white">SQL Editor</span>.</li>
          <li>Run this SQL to create your new, user-aware `messages` table. This version adds a `user_id` column linked to Supabase's built-in `auth.users` table.</li>
        </ol>
        <CodeBlock code={createTableSql} language="sql" />
        <ol className="list-decimal list-inside space-y-3 pl-4" start={4}>
          <li>
            Next, we'll enable **Row Level Security (RLS)**. This is the most critical step for data privacy. RLS is a PostgreSQL feature that forces every database request to obey security policies you define.
            <p className="mt-2">In the SQL Editor, clear out the previous command, then copy/paste and run the following line:</p>
          </li>
        </ol>
        <CodeBlock code={enableRLS} language="sql" />
        <ol className="list-decimal list-inside space-y-3 pl-4" start={5}>
          <li>
            Now, let's create our security policies. We need two rules: one to control who can read messages, and one to control who can create them. <span className="font-semibold text-white">Run these SQL queries one by one</span> in the SQL Editor using the same "clear, copy, paste, run" method.
            <div className="p-3 my-2 rounded-lg bg-green-900/30 border border-green-500/50">
                <p className="font-bold text-green-300">How it Works:</p>
                <p className="text-green-200">The magic here is <code className="font-mono text-sm">auth.uid()</code>. This is a special Supabase function that returns the unique ID of the currently logged-in user. Our policies use it to ensure the `user_id` on any message matches the person making the request.</p>
            </div>
          </li>
        </ol>
        <CodeBlock code={selectPolicySql} language="sql" />
        <CodeBlock code={insertPolicySql} language="sql" />
        <ol className="list-decimal list-inside space-y-3 pl-4" start={6}>
            <li>
                Finally, get your API credentials for this **new** project. These are in two different locations.
                <ol className="list-[lower-alpha] list-inside space-y-2 mt-2 pl-4">
                    <li>In the Supabase dashboard, click on <span className="font-semibold text-white">Project Settings</span> (the gear icon ⚙️).</li>
                    <li>First, click on <span className="font-semibold text-white">Data API</span> in the settings menu. On this page, copy the <span className="font-bold">Project URL</span>.</li>
                    <li>Next, click on <span className="font-semibold text-white">API Keys</span> in the menu. On this page, copy the <span className="font-bold">`anon` `public`</span> Project API Key.</li>
                </ol>
                Keep these two values safe. You'll need them for Part 3.
            </li>
        </ol>
      </div>
    ),
  },
  {
    title: 'Part 2: The Frontend (React & Supabase Client)',
    icon: <BrowserIcon />,
    content: (
      <div className="space-y-4">
        <p>With RLS securing our database, we can now interact with it directly from the frontend using the Supabase JS client. This simplifies our architecture significantly.</p>
        <ol className="list-decimal list-inside space-y-3 pl-4">
            <li>We need to provide our app with the Supabase credentials. In a real project, you would create a `.env.local` file. For this tutorial, we will handle this during deployment in the next step.</li>
            <li>The app below is now a live demo. You can sign up with a new email and password.</li>
            <li>Once you are logged in, you can add and view your own messages. Try opening this app in another browser and signing in as a different user—you'll see that your messages are completely separate and private!</li>
            <li>This works because every request sent to Supabase from the browser includes an authentication token, and our RLS policies use that token to securely filter the data on the server before it's ever sent back.</li>
        </ol>
      </div>
    ),
  },
   {
    title: 'Part 3: Deploy Your Secure Frontend',
    icon: <RocketIcon />,
    content: (
      <div className="space-y-4">
        <p>To deploy your own version of this secure application, you'll need a new GitHub repository and a new Vercel project.</p>
        <ol className="list-decimal list-inside space-y-3 pl-4">
          <li>
            Create a **new** GitHub repository. Name it something like <span className="font-semibold text-white">lesson-2-auth-frontend</span>. Push your React project code (like this tutorial app) to this new repository.
          </li>
          <li>
            Sign in to <a href="https://vercel.com" target="_blank" rel="noopener noreferrer" className="text-brand-primary hover:underline">Vercel</a> and create a **new** project, importing the new GitHub repo you just made.
          </li>
          <li>Before deploying, go to the new project's <span className="font-semibold text-white">Settings &gt; Environment Variables</span>.</li>
          <li>
            Add the two credentials you copied from your **new Supabase project** in Part 1. It is critical that you name them correctly:
            <ul className="list-disc list-inside mt-2 pl-6 bg-base-300 p-3 rounded-md">
                <li>Key: `VITE_SUPABASE_URL`, Value: Your new Project URL from Supabase.</li>
                <li>Key: `VITE_SUPABASE_ANON_KEY`, Value: Your new `anon` public Project API Key from Supabase.</li>
            </ul>
             <div className="p-3 my-2 rounded-lg bg-yellow-900/30 border border-yellow-500/50">
                <p className="font-bold text-yellow-300">Important!</p>
                <p className="text-yellow-200">The `VITE_` prefix is required by the Vite build tool to expose these variables securely to the frontend code.</p>
            </div>
          </li>
          <li>Deploy! You now have a live, secure, multi-user application that you built from scratch. Congratulations!</li>
        </ol>
      </div>
    ),
  },
];
